{{>licenseInfo}}

//<#operations><#operation>
//alox '<&path>', '<httpMethod>'
//</operation></operations>
{{=< >=}}
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module. ALOX
    define(['<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient'<#imports>, '<#invokerPackage><&invokerPackage>/</invokerPackage><#modelPackage><&modelPackage>/</modelPackage><import>'</imports>], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient')<#imports>, require('../<#modelPackage><&modelPackage>/</modelPackage><import>')</imports>);
  } else {
    // Browser globals (root is window)
    if (!root.<&moduleName>) {
      root.<&moduleName> = {};
    }
    root.<&moduleName>.<&classname> = factory(root.<&moduleName>.ApiClient<#imports>, root.<&moduleName>.<import></imports>);
  }
}(this, function(ApiClient<#imports>, <import></imports>) {
  'use strict';

<#emitJSDoc>  /**
   * <baseName> service.
   * @module <#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><classname>
   * @version <projectVersion>
   */

  /**
   * Constructs a new <&classname>. <#description>
   * <description></description>
   * @alias module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><apiPackage>/</apiPackage><classname>
   * @class
   * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:<#invokerPackage><&invokerPackage>/</invokerPackage>ApiClient#instance} if unspecified.
   */
</emitJSDoc>  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    this.callApiAsync = function(path, httpMethod, pathParams,
      queryParams, collectionQueryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,
      returnType<^usePromises>, callback</usePromises>, progress) {
        var _this = this;
        if (callback) {
          var cb = function(error, data, response) {
              var polling = false;
              if (!error) {
                try {
                  // If the response contains a job id we need to start polling
                  if (data.job_id) {
                      polling = true;
                      var cb = function(e,d,r) {
                          if (e) {
                              // An error occurred
                              callback(e,d,r);
                          }
                          else if (d) {
                              var res = JSON.parse(d.result);
                              var prog = JSON.parse(d.progress);
                              if (progress && prog) {
                                  progress(prog);
                              }
                              if (d.error) {
                                  callback(JSON.parse(d.error), d, r);
                              }
                              else if (res != null) {
                                  // Got the final response
                                  callback(e, res, r);
                              } else {
                                  // Continue polling...
                                  setTimeout(function () {
                                      _this.getJob(data.job_id, cb);
                                  }, 1000);
                              }
                          }
                      }
                      // Start polling (only called once)
                      _this.getJob(data.job_id, cb);

                  }
                } catch (err) {
                  error = err;
                }
              }
              if (!polling) callback(error, data, response);
            }
          }

          return this.apiClient.callApi(
            path, httpMethod,
            pathParams, queryParams, collectionQueryParams, headerParams, formParams, bodyParam,
            authNames, contentTypes, accepts, returnType, cb
          );
    }

<#operations><#operation><#emitJSDoc><^usePromises>
    /**
     * Callback function to receive the result of the <operationId> operation.
     * @callback module:<#invokerPackage><invokerPackage>/</invokerPackage><#apiPackage><apiPackage>/</apiPackage><classname>~<operationId>Callback
     * @param {String} error Error message, if any.
     * @param <#vendorExtensions.x-jsdoc-type>{<&vendorExtensions.x-jsdoc-type>} data The data returned by the service call.</vendorExtensions.x-jsdoc-type><^vendorExtensions.x-jsdoc-type>data This operation does not return a value.</vendorExtensions.x-jsdoc-type>
     * @param {String} response The complete HTTP response.
     */</usePromises>

    /**<#summary>
     * <summary></summary><#notes>
     * <notes></notes><#allParams><#required>
     * @param {<&vendorExtensions.x-jsdoc-type>} <paramName> <description></required></allParams><#hasOptionalParams>
     * @param {Object} opts Optional parameters<#allParams><^required>
     * @param {<&vendorExtensions.x-jsdoc-type>} opts.<paramName> <description><#defaultValue> (default to <.>)</defaultValue></required></allParams></hasOptionalParams><^usePromises>
     * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<operationId>Callback} callback The callback function, accepting three arguments: error, data, response
     * @param {Function} progress The progress callback function, accepting one argument: progress<#returnType>
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}</returnType></usePromises><#usePromises>
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}<#returnType>, with an object containing data of type {@link <&vendorExtensions.x-jsdoc-type>} and HTTP response</returnType><^returnType>, with an object containing HTTP response</returnType></usePromises>
     */
</emitJSDoc>    this.<operationId><#usePromises>WithHttpInfo</usePromises> = function(<vendorExtensions.x-codegen-argList>, progress) {<#hasOptionalParams>
      opts = opts || {};</hasOptionalParams>
      var postBody = <#bodyParam><#required><paramName></required><^required>opts['<paramName>']</required></bodyParam><^bodyParam>null</bodyParam>;
<#allParams><#required>
      // verify the required parameter '<paramName>' is set
      if (<paramName> === undefined || <paramName> === null) {
        throw new Error("Missing the required parameter '<paramName>' when calling <operationId>");
      }
</required></allParams>

      var pathParams = {<#pathParams>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></pathParams>
      };
      var queryParams = {<#queryParams><^collectionFormat>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required>,</collectionFormat></queryParams>
      };
      var collectionQueryParams = {<#queryParams><#collectionFormat>
        '<baseName>': {
          value: <#required><paramName></required><^required>opts['<paramName>']</required>,
          collectionFormat: '<collectionFormat>'
        },</collectionFormat></queryParams>
      };
      var headerParams = {<#headerParams>
        '<baseName>': <#required><paramName></required><^required>opts['<paramName>']</required><#hasMore>,</hasMore></headerParams>
      };
      var formParams = {<#formParams>
        '<baseName>': <#collectionFormat>this.apiClient.buildCollectionParam(<#required><paramName></required><^required>opts['<paramName>']</required>, '<collectionFormat>')</collectionFormat><^collectionFormat><#required><paramName></required><^required>opts['<paramName>']</required></collectionFormat><#hasMore>,</hasMore></formParams>
      };

      var authNames = [<#authMethods>'<name>'<#hasMore>, </hasMore></authMethods>];
      var contentTypes = [<#consumes>'<& mediaType>'<#hasMore>, </hasMore></consumes>];
      var accepts = [<#produces>'<& mediaType>'<#hasMore>, </hasMore></produces>];
      var returnType = <#returnType><&returnType></returnType><^returnType>null</returnType>;

      return this.callApiAsync(
        '<&path>', '<httpMethod>',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType<^usePromises>, callback</usePromises>, progress
      );
    }
<#usePromises>
    <#emitJSDoc>

    /**<#summary>
     * <summary></summary><#notes>
     * <notes></notes><#allParams><#required>
     * @param {<&vendorExtensions.x-jsdoc-type>} <paramName> <description></required></allParams><#hasOptionalParams>
     * @param {Object} opts Optional parameters<#allParams><^required>
     * @param {<&vendorExtensions.x-jsdoc-type>} opts.<paramName> <description><#defaultValue> (default to <.>)</defaultValue></required></allParams></hasOptionalParams><^usePromises>
     * @param {module:<#invokerPackage><&invokerPackage>/</invokerPackage><#apiPackage><&apiPackage>/</apiPackage><&classname>~<operationId>Callback} callback The callback function, accepting three arguments: error, data, response<#returnType>
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}</returnType></usePromises><#usePromises>
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}<#returnType>, with data of type {@link <&vendorExtensions.x-jsdoc-type>}</returnType></usePromises>
     */
</emitJSDoc>    this.<operationId> = function(<vendorExtensions.x-codegen-argList>) {
      return this.<operationId>WithHttpInfo(<vendorExtensions.x-codegen-argList>)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
</usePromises>
</operation></operations>  };

  return exports;
}));<={{ }}=>
